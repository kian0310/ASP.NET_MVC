
@{
    Layout = null;
}

@*  這是 Razor的註解  *@
<!-- 這是 HTML的註解。 執行後，使用者的瀏覽器仍可看見這段註解文字。 -->

@{
    string nowDT = DateTime.Now.ToLongDateString();
    // C#註解：宣告與設定變數的初始值。後面記得要加上「分號semi-colon（;）」
    @* Razor註解：宣告與設定變數的初始值。後面記得要加上「分號semi-colon（;）」 *@

    string str = "Today date(2)：" + DateTime.Now.ToShortDateString() + "(字串相連的寫法，透過 + 符號)";
    //C# annotation：string and 變數相連，C#語法 please use + sign.

    @: write on { } 內的變數：<font color ="red">@nowDT </font>
    @* Razor annotation：取得 nowDT變數的「數值」，後面不需要加上 semi-colon ( ; ) *@
    @* Razor annotation：This 區域的output value, 會出現在網頁最上方。<html>標籤上方 *@
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index6 - 簡易的入門，Razor 寫法</title>

    <script type="text/javascript">
        alert("Hello! The World.");
    </script>

</head>
<body>
    <div>
        <br /><br /><br /><br />
        <h3>簡易的入門，Razor 寫法</h3><hr />
        <br />

        Today date(1)：@DateTime.Now.ToShortDateString() <br />

        @str
        @*annotation: 取得value, 後面not need 加上 semicolon(;)*@
        <hr /><br /><br />

        ouput date#1: @nowDT or 寫成 @(nowDT)    <br /><br />
        <!--HTML annotation: 取得 nowDT變數的「數值」-->
        @*remark: 變數 nowDT 在page on 已經宣告了*@

        ouput date#2: @nowDT<text>is a good date.</text>   <br />
        @* 註解：請勿寫成這種 錯誤寫法，變數與字串之間，沒有「空白」區隔，連在一起。
        錯誤寫法    @nowDT是一個好日子 *@

        ouput date#2(正確版): @nowDT is a good date.   <br /><br />
        @* 註解：變數與字串之間，使用「空白」區隔，不能連在一起。 *@

        output date#3: Today is @(nowDT) 天氣晴   <br /><br />

        output date#4: Today is <text>@nowDT</text>天氣晴
        @* 註解：請勿寫成這種 錯誤寫法
        錯誤寫法    今天是@nowDT天氣晴 *@
        @* 註解：錯誤寫法，變數與字串之間，沒有「空白」區隔，連在一起。*@
        <hr /><br /><br />

        output@sign: @@ <br /><br />
        @*annotation: 連續打兩個＠符號，就能輸出＠到畫面上。
        類似C＃語法的  \\ 可以輸出 \ 符號 *@

        output@sign (E-Mail): kian031@@yahoo.com.tw  <hr /><br /><br />

        output word #1:
        @if (ViewData.IsReadOnly)
        {
            Response.Write("Response.Write() output: 唯讀 - ReadOnly <br />");
            @*annotation: Response.Write() 會output on 網頁最上方。<html>標籤上方*@
            @:唯讀 - ReadOnly<br />
        }
        else
        {
            Response.Write("Response.Write() output: 並非唯讀 - Not ReadOnly <br />");
            @:並非唯讀 - Not ReadOnly<br />
        }

        <br />
        output word#2: @(ViewData.IsReadOnly ? "唯讀 - ReadOnly<br />": "並非唯讀 - Not ReadOnly")
        @* 註解：跟上一段 if 程式相同，此為縮寫 *@

        <br /><br />
        output word#3: .IsInt() 能否轉成整數? @("10000".IsInt())
        @* 註解：執行成果 True *@

        <br />
        output word#4: @("10000".AsInt())
        @* 註解：執行成果 10000 *@

        <br />
        output word#5: @(Convert.ToInt32("10000"))
        @* 註解：執行成果 10000 *@

        <br /><br /> <!--關於超連結，也可以參閱範例 Index10BeginForm的 Html.ActionLink() -->
        output word#6: @Href("~/Lesson1/Index")
        @* 註解：執行成果 ：/Lesson1/Index。        執行網址（URL）的路徑*@

        <br />
        output word#7: @Href("Index6")
        @* 註解：執行成果 /Views/Lesson1/Index6。        專案裡面的「詳細路徑」 *@

    </div>
</body>
</html>
